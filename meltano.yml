version: 1
send_anonymous_usage_stats: false
default_environment: dev
project_id: tap-suiteql
plugins:
  extractors:
  - name: tap-suiteql
    namespace: tap_suiteql
    pip_url: -e .
    capabilities:
    - properties
    - state
    - catalog
    - discover
    settings:
    - name: account_id
      env: TAP_SUITEQL_ACCOUNT_ID
    - name: consumer_key
      env: TAP_SUITEQL_CONSUMER_KEY
    - name: consumer_secret
      env: TAP_SUITEQL_CONSUMER_SECRET
    - name: token_id
      env: TAP_SUITEQL_TOKEN_ID
    - name: token_secret
      env: TAP_SUITEQL_TOKEN_SECRET
    - name: base_url
      env: TAP_SUITEQL_BASE_URL
    - name: start_date
      env: TAP_SUITEQL_START_DATE
    config:
      stream_maps:
    #     account:
    #       id: int(id)
    #       # _fivetran_deleted: "true if _sdc_deleted_at is not null else false"
    #       # __alias__: account
    #       # hash_id: md5(str(id))
    #       # __key_properties__: ["hash_id"]
    #     accounthierarchylevels:
    #       id: int(id)
    #     accountingbook:
    #       id: int(id)
    #     accountingperiod:
    #       accountingperiod: int(accountingperiod)
    #     accountingperiodfiscalcalendars:
    #       id: int(id)
    #     accounttype:
    #       internalid: int(internalid)
    #     automationsystems:
    #       id: int(id)
    #     classification:
    #       id: int(id)
    #     consolidatedexchangerate:
    #       id: int(id)
    #     contractitems:
    #       id: int(id)
    #     contracts:
    #       id: int(id)
    #     contractstatus:
    #       id: int(id)
    #     currency:
    #       id: int(id)
    #     customers:
    #       id: int(id)
    #     department:
    #       id: int(id)
    #     employees:
    #       id: int(id)
    #     entity:
    #       id: int(id)
    #     entityaddress:
    #       nkey: int(nkey)
    #       recordowner: int(recordowner)
    #     item:
    #       id: int(id)
    #     journalentries:
    #       id: int(id)
    #     location:
    #       id: int(id)
    #     locationmainaddress:
    #       nkey: int(nkey)
    #       recordowner: int(recordowner)
    #     productids:
    #       id: int(id)
    #     productstanding:
    #       id: int(id)
    #     productstatus:
    #       id: int(id)
    #     psms:
    #       id: int(id)
    #     subsidiary:
    #       id: int(id)
    #     transaction_lines:
    #       uniquekey: int(uniquekey)
        # transaction:
        #   id: int(id)
        # transactionaccountingline:
        #   account: int(account)
        #   accountingbook: int(accountingbook)
        #   amount: float(amount)
        #   amountlinked: float(amountlinked)
        #   #amountpaid: float(amountlinked)
        #   #amountunpaid: float(debit)+float(credit)
        #   #credit: float(credit)
        #   #debit: float(debit)
        #   exchangerate: float(exchangerate)
        #   #glauditnumbersequence: int(glauditnumbersequence)
        #   #glauditnumbersetby: int(glauditnumbersetby)
        #   netamount: float(netamount)
        #   #paymentamountunused: float(paymentamountunused)
        #   #paymentamountused: float(paymentamountused)
        #   transaction: int(transaction)
        #   transactionline: int(transactionline)
        transactionline:
          # accountinglinetype: "str(config[accountinglinetype]) if accountinglinetype in config else None"
          # actualshipdate: "config[actualshipdate] if actualshipdate in config else None"
          # amortizationenddate: "config[amortizationenddate] if amortizationenddate in config else None"
          # amortizationresidual: "str(config[amortizationresidual]) if amortizationresidual in config else None"
          # amortizationsched: "int(config[amortizationsched]) if amortizationsched in config else None"
          # amortizstartdate: "str(config[amortizstartdate]) if amortizstartdate in config else None"
          # billeddate: "config[billeddate] if billeddate in config else None"
          # billingschedule: "int(config[billingschedule]) if billingschedule in config else None"
          # billvariancestatus: "str(config[billvariancestatus]) if billvariancestatus in config else None"
          # category: "int(config[category]) if category in config else None"
          # class: int(class)
          # cleared: "config[cleared] if cleared in config else None"
          # cleareddate: "config[cleareddate] if cleareddate in config else None"
          # closedate: "str(config[closedate]) if closedate in config else None"
          # commitinventory: "int(config[commitinventory]) if commitinventory in config else None"
          # commitmentfirm: "config[commitmentfirm] if commitmentfirm in config else None"
          # costestimate: "float(config[costestimate]) if costestimate in config else None"
          # costestimaterate: "float(config[costestimaterate]) if costestimaterate in config else None"
          # costestimatetype: "str(config[costestimatetype]) if costestimatetype in config else None"
          # createdfrom: "int(config[createdfrom]) if createdfrom in config else None"
          creditforeignamount: float(creditforeignamount)
          # cseg_conference: "int(config[cseg_conference]) if cseg_conference in config else None"
          # custcol1: "config[custcol1] if custcol1 in config else None"
          # custcol10: "int(config[custcol10]) if custcol10 in config else None"
          # custcol11: "int(config[custcol11]) if custcol11 in config else None"
          # custcol12: "int(config[custcol12]) if custcol12 in config else None"
          # # custcol13: "config[custcol13] if custcol13 in config else None"
          # custcol14: "int(config[custcol14]) if custcol14 in config else None"
          # custcol15: "int(config[custcol15]) if custcol15 in config else None"
          # # custcol16: "str(config[custcol16]) if custcol16 in config else None"
          # custcol17: "float(config[custcol17]) if custcol17 in config else None"
          # custcol18: "float(config[custcol18]) if custcol18 in config else None"
          # custcol19: "float(config[custcol19]) if custcol19 in config else None"
          # # custcol2: "config[custcol2] if custcol2 in config else None"
          # # custcol20: "str(config[custcol20]) if custcol20 in config else None"
          # # custcol21: "str(config[custcol21]) if custcol21 in config else None"
          # # custcol22: "config[custcol22] if custcol22 in config else None"
          # # custcol23: "config[custcol23] if custcol23 in config else None"
          # # custcol24: "str(config[custcol24]) if custcol24 in config else None"
          # custcol25: "int(config[custcol25]) if custcol25 in config else None"
          # custcol26: "int(config[custcol26]) if custcol26 in config else None"
          # custcol27: "int(config[custcol27]) if custcol27 in config else None"
          # # custcol28: "str(config[custcol28]) if custcol28 in config else None"
          # # custcol29: "str(config[custcol29]) if custcol29 in config else None"
          # custcol3: "int(config[custcol3]) if custcol3 in config else None"
          # custcol30: "int(config[custcol30]) if custcol30 in config else None"
          # # custcol32: "config[custcol32] if custcol32 in config else None"
          # # custcol33: "config[custcol33] if custcol33 in config else None"
          # # custcol34: "str(config[custcol34]) if custcol34 in config else None"
          # custcol35: "float(config[custcol35]) if custcol35 in config else None"
          # # custcol4: "str(config[custcol4]) if custcol4 in config else None"
          # custcol5: "int(config[custcol5]) if custcol5 in config else None"
          # custcol6: "int(config[custcol6]) if custcol6 in config else None"
          # custcol8: "int(config[custcol8]) if custcol8 in config else None"
          # # custcol9: "str(config[custcol9]) if custcol9 in config else None"
          # # custcol_5892_eutriangulation: "config[custcol_5892_eutriangulation] if custcol_5892_eutriangulation in config else None"
          # # custcol_adjustment_field: "str(config[custcol_adjustment_field]) if custcol_adjustment_field in config else None"
          # custcol_adjustment_tax_code: "int(config[custcol_adjustment_tax_code]) if custcol_adjustment_tax_code in config else None"
          # custcol_billqty: "float(config[custcol_billqty]) if custcol_billqty in config else None"
          # # custcol_celigo_hubspot_line_id: "str(config[custcol_celigo_hubspot_line_id]) if custcol_celigo_hubspot_line_id in config else None"
          # custcol_classline: "int(config[custcol_classline]) if custcol_classline in config else None"
          # # custcol_counterparty_vat: "str(config[custcol_counterparty_vat]) if custcol_counterparty_vat in config else None"
          # # custcol_country_of_origin_code: "str(config[custcol_country_of_origin_code]) if custcol_country_of_origin_code in config else None"
          # # custcol_country_of_origin_name: "str(config[custcol_country_of_origin_name]) if custcol_country_of_origin_name in config else None"
          # custcol_customer_type: "int(config[custcol_customer_type]) if custcol_customer_type in config else None"
          # custcol_departmentline: "int(config[custcol_departmentline]) if custcol_departmentline in config else None"
          # custcol_emirate: "int(config[custcol_emirate]) if custcol_emirate in config else None"
          # # custcol_establishment_code: "str(config[custcol_establishment_code]) if custcol_establishment_code in config else None"
          # custcol_expense_code_of_supply: "int(config[custcol_expense_code_of_supply]) if custcol_expense_code_of_supply in config else None"
          # # custcol_expense_url: "str(config[custcol_expense_url]) if custcol_expense_url in config else None"
          # # custcol_from_ci_id: "str(config[custcol_from_ci_id]) if custcol_from_ci_id in config else None"
          # # custcol_inline_discount: "str(config[custcol_inline_discount]) if custcol_inline_discount in config else None"
          # # custcol_list_rate: "str(config[custcol_list_rate]) if custcol_list_rate in config else None"
          # # custcol_location: "str(config[custcol_location]) if custcol_location in config else None"
          # # custcol_mtce_support_percent: "str(config[custcol_mtce_support_percent]) if custcol_mtce_support_percent in config else None"
          # # custcol_mtce_support_type: "str(config[custcol_mtce_support_type]) if custcol_mtce_support_type in config else None"
          # # custcol_nature_of_transaction_codes: "str(config[custcol_nature_of_transaction_codes]) if custcol_nature_of_transaction_codes in config else None"
          # # custcol_nondeductible_account: "str(config[custcol_nondeductible_account]) if custcol_nondeductible_account in config else None"
          # # custcol_opt_out_ms: "config[custcol_opt_out_ms] if custcol_opt_out_ms in config else None"
          # # custcol_original_quantity: "str(config[custcol_original_quantity]) if custcol_original_quantity in config else None"
          # # custcol_renewal_reset_data: "str(config[custcol_renewal_reset_data]) if custcol_renewal_reset_data in config else None"
          # # custcol_renewals_exclusion: "config[custcol_renewals_exclusion] if custcol_renewals_exclusion in config else None"
          # custcol_rsc_accthielevel: "int(config[custcol_rsc_accthielevel]) if custcol_rsc_accthielevel in config else None"
          # custcol_rsc_prodid: "int(config[custcol_rsc_prodid]) if custcol_rsc_prodid in config else None"
          # custcol_sii_annual_prorate: "float(config[custcol_sii_annual_prorate]) if custcol_sii_annual_prorate in config else None"
          # custcol_sii_exempt_line_details: "int(config[custcol_sii_exempt_line_details]) if custcol_sii_exempt_line_details in config else None"
          # # custcol_sii_service_date: "config[custcol_sii_service_date] if custcol_sii_service_date in config else None"
          # custcol_statistical_procedure_purc: "int(config[custcol_statistical_procedure_purc]) if custcol_statistical_procedure_purc in config else None"
          # custcol_statistical_procedure_sale: "int(config[custcol_statistical_procedure_sale]) if custcol_statistical_procedure_sale in config else None"
          # custcol_statistical_value: "float(config[custcol_statistical_value]) if custcol_statistical_value in config else None"
          # custcol_statistical_value_base_curr: "float(config[custcol_statistical_value_base_curr]) if custcol_statistical_value_base_curr in config else None"
          # # custcol_suitesync_rev_rec_end: "config[custcol_suitesync_rev_rec_end] if custcol_suitesync_rev_rec_end in config else None"
          # # custcol_suitesync_rev_rec_start: "config[custcol_suitesync_rev_rec_start] if custcol_suitesync_rev_rec_start in config else None"
          # # custcol_swe_contract_end_date: "config[custcol_swe_contract_end_date] if custcol_swe_contract_end_date in config else None"
          # custcol_swe_contract_item_term_months: "float(config[custcol_swe_contract_item_term_months]) if custcol_swe_contract_item_term_months in config else None"
          # # custcol_swe_contract_start_date: "config[custcol_swe_contract_start_date] if custcol_swe_contract_start_date in config else None"
          # custcol_swe_ms_basis_amount: "float(config[custcol_swe_ms_basis_amount]) if custcol_swe_ms_basis_amount in config else None"
          # custcol_swe_orig_list_rate: "float(config[custcol_swe_orig_list_rate]) if custcol_swe_orig_list_rate in config else None"
          # custcol_swe_orig_price_level: "int(config[custcol_swe_orig_price_level]) if custcol_swe_orig_price_level in config else None"
          # custcol_swe_price_level: "int(config[custcol_swe_price_level]) if custcol_swe_price_level in config else None"
          # custcol_swv_ci_uplift: "float(config[custcol_swv_ci_uplift]) if custcol_swv_ci_uplift in config else None"
          # custcol_swv_cr_ms_pricing_option: "int(config[custcol_swv_cr_ms_pricing_option]) if custcol_swv_cr_ms_pricing_option in config else None"
          # custcol_termline: "int(config[custcol_termline]) if custcol_termline in config else None"
          # custcol_vendor: "int(config[custcol_vendor]) if custcol_vendor in config else None"
          # debitforeignamount: "float(config[debitforeignamount]) if debitforeignamount in config else None"
          # department: "int(config[department]) if department in config else None"
          # # documentnumber: "str(config[documentnumber]) if documentnumber in config else None"
          # # donotdisplayline: "config[donotdisplayline] if donotdisplayline in config else None"
          # # eliminate: "config[eliminate] if eliminate in config else None"
          entity: int(entity)
          # # estgrossprofit: "float(config[estgrossprofit]) if estgrossprofit in config else None"
          # # estgrossprofitpercent: "float(config[estgrossprofitpercent]) if estgrossprofitpercent in config else None"
          # estimatedamount: "float(config[estimatedamount]) if estimatedamount in config else None"
          # # expectedreceiptdate: "config[expectedreceiptdate] if expectedreceiptdate in config else None"
          expenseaccount: int(expenseaccount)
          foreignamount: float(foreignamount)
          foreignamountpaid: float(foreignamountpaid)
          foreignamountunpaid: float(foreignamountunpaid)
          #foreignpaymentamountunused: float(foreignpaymentamountunused)
          #foreignpaymentamountused: float(foreignpaymentamountused)
          # # fulfillable: "config[fulfillable] if fulfillable in config else None"
          # fxamountlinked: "float(config[fxamountlinked]) if fxamountlinked in config else None"
          # fxvsoeprice: "float(config[fxvsoeprice]) if fxvsoeprice in config else None"
          id: int(id)
          # invsoebundle: "config[invsoebundle] if invsoebundle in config else None"
          # isbillable: "config[isbillable] if isbillable in config else None"
          # isclosed: "config[isclosed] if isclosed in config else None"
          # iscogs: "config[iscogs] if iscogs in config else None"
          # iscustomglline: "config[iscustomglline] if iscustomglline in config else None"
          # isfullyshipped: "config[isfullyshipped] if isfullyshipped in config else None"
          # isfxvariance: "config[isfxvariance] if isfxvariance in config else None"
          # isinventoryaffecting: "config[isinventoryaffecting] if isinventoryaffecting in config else None"
          # isrevrectransaction: "config[isrevrectransaction] if isrevrectransaction in config else None"
          # item: int(item)
          # itemtype: "int(config[itemtype]) if itemtype in config else None"
          # linelastmodifieddate: "config[linelastmodifieddate] if linelastmodifieddate in config else None"
          #linesequencenumber: int(linesequencenumber)
          # location: int(location)
          # mainline: "config[mainline] if mainline in config else None"
          # matchbilltoreceipt: "config[matchbilltoreceipt] if matchbilltoreceipt in config else None"
          # memo: "str(config[memo]) if memo in config else None"
          # needsrevenueelement: "config[needsrevenueelement] if needsrevenueelement in config else None"
          # netamount: float(netamount)
          # oldcommitmentfirm: "config[oldcommitmentfirm] if oldcommitmentfirm in config else None"
          # orderpriority: "float(config[orderpriority]) if orderpriority in config else None"
          # paymentmethod: "int(config[paymentmethod]) if paymentmethod in config else None"
          # price: "int(config[price]) if price in config else None"
          # processedbyrevcommit: "config[processedbyrevcommit] if processedbyrevcommit in config else None"
          # quantity: "float(config[quantity]) if quantity in config else None"
          # quantitybackordered: "float(config[quantitybackordered]) if quantitybackordered in config else None"
          # quantitybilled: "float(config[quantitybilled]) if quantitybilled in config else None"
          # quantitycommitted: "float(config[quantitycommitted]) if quantitycommitted in config else None"
          # quantityrejected: "float(config[quantityrejected]) if quantityrejected in config else None"
          # quantityshiprecv: "float(config[quantityshiprecv]) if quantityshiprecv in config else None"
          # rate: "float(config[rate]) if rate in config else None"
          # rateamount: "float(config[rateamount]) if rateamount in config else None"
          # ratepercent: "float(config[ratepercent]) if ratepercent in config else None"
          # requestnote: "str(config[requestnote]) if requestnote in config else None"
          # revenueelement: "int(config[revenueelement]) if revenueelement in config else None"
          # subsidiary: int(subsidiary)
          # taxline: "config[taxline] if taxline in config else None"
          transaction: int(transaction)
          # transactiondiscount: "config[transactiondiscount] if transactiondiscount in config else None"
          # transactionlinetype: "str(config[transactionlinetype]) if transactionlinetype in config else None"
          uniquekey: int(uniquekey)
          # units: "int(config[units]) if units in config else None"
          # vsoedelivered: "config[vsoedelivered] if vsoedelivered in config else None"
          # vsoeisestimate: "config[vsoeisestimate] if vsoeisestimate in config else None"
          # vsoepermitdiscount: "str(config[vsoepermitdiscount]) if vsoepermitdiscount in config else None"
          # vsoeprice: "float(config[vsoeprice]) if vsoeprice in config else None"
          # vsoesopgroup: "str(config[vsoesopgroup]) if vsoesopgroup in config else None"
          hash_id: md5(config['hash_seed'] + str(id) + str(transaction))
          __key_properties__: ["hash_id"]
        transactionaccountingline:
          __source__: transactionline
          # include just the PII and the customer_id
          account: int(expenseaccount)
          accountingbook: int(1)
          amount: float(foreignamount)
          amountlinked: float(fxamountlinked)
          amountpaid: float(foreignamountpaid)
          amountunpaid: float(foreignamountunpaid)
          credit: float(creditforeignamount)
          debit: float(debitforeignamount)
          exchangerate: int(1)
          #glauditnumbersequence: int(glauditnumbersequence)
          #glauditnumbersetby: int(glauditnumbersetby)
          netamount: float(netamount)
          paymentamountunused: float(foreignpaymentamountunused)
          paymentamountused: float(foreignpaymentamountused)
          transaction: int(transaction)
          transactionline: int(id)
          hash_id: md5(config['hash_seed'] + str(id) + str(transaction))
          __key_properties__: ["hash_id"]
          # exclude anything not declared
          __else__: __NULL__
    #     vendor_types:
    #       id: int(id)
    #     vendorcategory:
    #       id: int(id)
    #     vendors:
    #       id: int(id)
      stream_map_config:
          hash_seed: 01AWZh7A6DzGm6iJZZ2T
    # metadata:
    #   account:
    #     replication-method: FULL_TABLE
    #     replication-key: id
    #   customer:
    #     replication-method: INCREMENTAL
    #   "*":
    #     replication-method: INCREMENTAL
    #   "*_full":
    #     replication-method: FULL_TABLE

  loaders:
  - name: target-jsonl
    variant: andyh1203
    pip_url: target-jsonl
  - name: target-postgres
    variant: meltanolabs
    pip_url: git+https://github.com/MeltanoLabs/target-postgres.git



##################################
#                                #
#       Mappers                  #
#                                #
##################################
  mappers:
  - name: meltano-map-transformer
    pip_url: "git+https://github.com/MeltanoLabs/meltano-map-transform.git"
    executable: meltano-map-transform
    settings:
    - name: stream_maps
      kind: object
    mappings:
    - name: hash_email
      config:
        stream_maps:
          customers:
            id: id
            email:      # drop the PII field from RECORD and SCHEMA messages
            email_domain: email.split('@')[-1]
            email_hash: md5(config['hash_seed'] + email)
            __else__: null
        stream_map_config:
          hash_seed: 01AWZh7A6DzGm6iJZZ2T
    - name: whitelist
      config:
        stream_maps:
          # Whitelist `id` and `description` fields, drop all others
          customers:
            id: id
            description: last_name
            __else__: __NULL__
            __alias__: customers_v2
    - name: add_timestamp
      config:
        stream_maps:
          customers:
            mapping_time: datetime.date.today()
            __alias__: customers_v3
    - name: add_str
      config:
        stream_maps:
          customers:
            client_id: "\"client_123\""
            id: int(id)
            __alias__: customers_v4
            hash_id: md5(str(id))
            __key_properties__: ["hash_id"]
    - name: lower
      config:
        stream_maps:
          customers:
            __alias__: customers_v5
            first_name: first_name.lower() # three different ways of accessing the variable
            last_name: record['last_name'].lower()
            email:  _['email'].upper()
            count_t: str(last_name.count("t")) # need to cast to str because it could be NULL!
            ip_address: __NULL__
    - name: find
      config:
        stream_maps:
          customers:
            __alias__: customers_v6
            first_name: "'found_book' if last_name == 'Book' else 'no_book'"
            id: id
            __else__: __NULL__
    - name: mask
      config:
        stream_maps:
          customers:
            __alias__: customers_v7
            last_name: "config[last_name] if last_name in config else 'no-mask-found'"
            first_name: first_name
            id: id
            __else__: __NULL__
        stream_map_config:
          Book: mask-1
          Tire: mask-2
          Dorian: mask-1
          Suddock: mask-1
          Daws: mask-3
          Maddison: mask-2
          Biernat: mask-4
          Wisden: mask-4
          Loyndon: Mask-2

environments:
  - name: dev
  - name: staging
  - name: prod
